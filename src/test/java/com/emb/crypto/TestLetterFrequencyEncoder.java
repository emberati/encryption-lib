package com.emb.crypto;

import org.junit.jupiter.api.Test;

import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

public class TestLetterFrequencyEncoder {
    @Test
    public void testLetterFrequencyEncoder() {
        final var encoder = new LetterFrequencyEncoder();
        final var encodedText = """
                щ зсдлъэд фцяб цоцюъбк сня пбь емйюсцдъ й цяъцк йюцсцъб йюмсэъъбжэ яцжмжэ, м й ясыфцк - яьэъъбж цяъцгюмлъбж еямъэдж зця цяъцк исбудк,\s
                ъдйжцюсн ъм юц, аюц цъц зсэъмяьдлмьц ядйнюимж щьмядьчшдщ. эе щйдо гюэо еямъэк юцьчиц ящм яцжм пбьэ лэьбжэ: яцж, фяд фцйюэъэшм "ицъюэъдъюмьч",\s
                ям йюцнвэк сняцж й ъэж юсмиюэс дфцсцщм, еъмждъэюбк йщцэжэ пьэъмжэ. цйюмьчъцд щйд ьмщиэ, щзьцюч яц ющдсйицк. юсмиюэс дфцсцщм ицфямюц зсэъмяьдлмь щцсцъэъы,\s
                э ъм щбщдйид пбьм эецпсмлдъм щцсцъм, ядслмвмн щ иьтщд пьэъ. щйд ьмщиэ цоцюъцфц сням пбьэ жнйъбд, сбпъбд, м зця ъэжэ едьдъъбд зцящмьб. емяъэд\s
                ящдсэ ьмщци щбоцяэьэ ъм цфсцжъбк ящцс-жцъдюъбк, ими дфц ъмебщмьэ эеясдщьд. ъм ъдж пбьэ юцлд цяъцгюмлъбд жнйъбд, лэщцсбпъбд э нэаъбд ьмщиэ,\s
                м зцйсдяэъд - ящыогюмлъбк "жцъдюъбк" юсмиюэс. щ емяъдк амйюэ ящцсм - сня ймсмтуди й зцфсдпмжэ э иьмяцщбжэ, иэудщуэжэ зцьаэвмжэ исбй.\s
                цоцюъбк сня зцьыаэь йщцд ъмещмъэд двд щ юд щсдждъм, ицфям еядйч смесдудъц пбьц юцсфцщмюч яэачт, зсэъцйэжцк зцяжцйицщъбжэ цоцюъэимжэ. щздсдяэ  ьмщци,\s
                ъм зьцвмяэ, щяцьч уэсцицфц юсцюымсм, йюцньэ здсдъцйъбд змьмюиэ э юцьзэьэйч юцсфцщшб й ицсеэъмжэ э ждуимжэ, ъмзцьъдъъбжэ\s
                щйдщцежцлъбжэ зсцяыиюмжэ. оцяэьэ цоцюъэиэ, цпщдумъъбд ыюимжэ, юдюдсимжэ, емкшмжэ. ы пмп эе ицсеэъ юцсамьэ фцьцщб иыс э шбзьню, щ ждуимо щэелмьэ зцсцйнюм,\s
                ицюцсбо зсцямщшб, щбъэжмн эе ждуим,аюцпб зцимемюч зциызмюдьт, ъдзсдждъъц зцяъэжмьэ ъмя фцьцщцк, ядслм ем йщнемъъбд емяъэд ъцфэ.\s
                ъм жцйюцщцк здсдя змьмюимжэ йъцщмьэ зэсцлъэиэ, пьэъъэиэ, юцсфцщшб фсдаъдщэимжэ, лмсдъъбжэ ъм зцйюъцж жмйьд. йпэюдъвэиэ смеьэщмьэ, зц ицздкид ем йюмимъ,\s
                фцснаэк йпэюдъч - ьтпэжбк юцфям ждяцщбк ъмзэюци, йцфсдщмщуэк эещцеаэицщ э йьылмвэо, емждсемщуэо щ оцьцяъбо ьмщимо. ьдюцж йпэюдъвэицщ\s
                йждъньэ юцсфцщшб ищмймжэ, э ймжбк ьтпэжбк эе ъэо пбь фсыудщбк, эе щмсдъбо фсыу, ицюцсбд щ жцадъцж щэяд ьдлмьэ яьн зсцямлэ зэсмжэямжэ ъм ьцюимо, м ищмй\s
                адсзмьэ эе щдясм исылимжэ. жнйъбд э сбпъбд ьмщиэ йцйюцньэ эе ящыо цюядьдъэк. щ здсщцж ьдлмьц ъм зцьимо жнйц смеъбо йцсюцщ - яэач, иысб,\s
                фыйэ, эъядкиэ, змьдъбд зцсцйнюм яьн лмсицфц э щ ьдянъбо щмъъмо - пдьбд зцсцйнюм яьн емьэщъцфц. ъм истачно зц йюдъмж пбьэ смещдумъб юыуэ пмсмуицщ э зцдъъбо\s
                жцьцицж юдьню, м щдйч зцюцьци емъню цицсцимжэ щйдщцежцлъбо смеждсцщ э зсэфцюцщьдъэк - ицзадъбо, щмсдъбо, зсцщдйъбо. щц щюцсцж цюядьдъээ, юджъцж,\s
                цйщдвдъъцж юцьчиц ящдсчт щц ящцс, щэйдьэ ядйнюиэ жнйъбо юыу. зця щйджэ ьмщимжэ - зцящмьб. цоцюъбк сня пбщмь цйцпдъъц цлэщьдъъбж здсдя пцьчуэжэ зсмеяъэимжэ.
                и ьмщимж зцяхделмьэ ъм юбйнаъбо сбймимо смйрсмъадъъбд иызаэоэ, э ем ъэжэ йьылмвэд щбъцйэьэ эе ьмщци""";

        final var decodedText = encoder.decode(encodedText);

        System.out.println();

        printPair("5 наиболее частых биграмм:", encoder.getBigramFrequencies(), 5);
        printPair("Наиболе частые пары биграмм:", encoder.getBigramDoubles(), 5);
        printPair("5 наиболее частых триграмм:", encoder.getTriramFrequencies(), 5);

        System.out.println(decodedText);
    }

    private static <K, V> void printPair(String title, Set<Map.Entry<K, V>> mostFrequent) {
        printPair(title, mostFrequent, -1);
    }
    private static <K, V> void printPair(String title, Set<Map.Entry<K, V>> mostFrequent, int limit) {
        String frequency;
        if (limit == -1) {
            frequency = mostFrequent
                    .stream()
                    .map(TestLetterFrequencyEncoder::toStringEntry)
                    .collect(Collectors.joining("\n"));
        } else {
            frequency = mostFrequent
                    .stream()
                    .limit(limit)
                    .map(TestLetterFrequencyEncoder::toStringEntry)
                    .collect(Collectors.joining("\n"));
        }

        System.out.printf("%s%n%s%n%n", title, frequency);
    }

    private static <K, V> String toStringEntry(Map.Entry<K, V> entry) {
        return "%s: %s".formatted(entry.getKey(), entry.getValue());
    }
}
